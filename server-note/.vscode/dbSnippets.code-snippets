{
  // Place your proadmindb workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "creates a simple database model": {
    "prefix": "basemodel",
    "body": [
      "const mongoose = require(\"mongoose\");",
      "const Option = require(\"./optionsModel\");",
      "",
      "const $2Schema = new mongoose.Schema(",
      "  {",
      "    name: String,",
      "    code: { type: String, immutable: true },",
      "    softDelete: { type: Boolean, default: false },",
      "  },",
      "  { timestamps: true }",
      ");",
      "",
      "$2Schema.pre(\"save\", async function (next) {",
      "  const resp = await Option.find({",
      "    key: { $eq: \"$2Counter\" },",
      "    softDelete: false,",
      "  });",
      "  let value;",
      "  if (resp.length == 0) {",
      "    await Option.create({ key: \"$2Counter\", value: 1, softDelete: false });",
      "    value = 1;",
      "  } else {",
      "    value = resp[0].value;",
      "  }",
      "  this.code = `$3-$${value}`;",
      "",
      "  const update$1Counter = await Option.findOneAndUpdate(",
      "    { key: { $eq: \"$2Counter\" } },",
      "    { value: Number(value) + 1 }",
      "  );",
      "  if (update$1Counter) {",
      "    next();",
      "  }",
      "});",
      "const $1 = mongoose.model(\"$1\", $2Schema);",
      "",
      "module.exports = $1;",
      ""
    ],
    "description": "creates a simple database model"
  },
  "creates a simple database model without pre save": {
    "prefix": "simpmodel",
    "body": [
      "const mongoose = require(\"mongoose\");",
      "const Option = require(\"./optionsModel\");",
      "",
      "const $2Schema = new mongoose.Schema(",
      "  {",
      "    name: String,",
      "    code: { type: String, immutable: true },",
      "    softDelete: { type: Boolean, default: false },",
      "  },",
      "  { timestamps: true }",
      ");",
      "",
      "const $1 = mongoose.model(\"$1\", $2Schema);",
      "",
      "module.exports = $1;",
      ""
    ],
    "description": "creates a simple database model"
  },
  "creates a database option model": {
    "prefix": "optionmodel",
    "body": [
      "const mongoose = require('mongoose');",
      "",
      "const optionsSchema = new mongoose.Schema(",
      "  {",
      "    key: {",
      "      type: String,",
      "      unique: true,",
      "    },",
      "    value: String,",
      "    softDelete: Boolean,",
      "  },",
      "  { timestamps: true }",
      ");",
      "",
      "const Options = mongoose.model('Options', optionsSchema);",
      "",
      "module.exports = Options;",
      ""
    ],
    "description": "creates a database option model"
  },
  "creates a base database controller": {
    "prefix": "basecontroller",
    "body": [
      "const asyncHandler = require('express-async-handler');",
      "",
      "const $1 = require('../models/$2Model');",
      "",
      "const getAll$3 = asyncHandler(async (req, res, next) => {",
      "  let { fields } = req.query;",
      "",
      "  if (fields) {",
      "    var fieldsList = fields",
      "      .split(',')",
      "      .map((field) => field.trim())",
      "      .filter((item) => item);",
      "  }",
      "  delete req.query['fields'];",
      "",
      "  const $4 = await $1.find(req.query)",
      "    .select(fieldsList || [])",
      "    .exec();",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "    results: $4.length,",
      "",
      "    $4: $4.reverse(),",
      "  });",
      "});",
      "",
      "const get$1 = asyncHandler(async (req, res, next) => {",
      "  const $2 = await $1.findById(req.params.id).exec();",
      "",
      "  if (!$2) {",
      "    return next(new ApiError('There is no $2 with that id', 404));",
      "  }",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "",
      "    $2,",
      "  });",
      "});",
      "",
      "const create$1 = asyncHandler(async (req, res, next) => {",
      "  const new$1 = await $1.create(req.body);",
      "",
      "  res.status(201).json({",
      "    status: 'success',",
      "",
      "    $2: new$1,",
      "  });",
      "});",
      "",
      "const update$1 = asyncHandler(async (req, res, next) => {",
      "  const updated$1 = await $1.findByIdAndUpdate(req.params.id, req.body, {",
      "    new: true,",
      "  });",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "",
      "    updated$1,",
      "  });",
      "});",
      "",
      "const delete$1 = asyncHandler(async (req, res, next) => {",
      "  await $1.findByIdAndDelete(req.params.id);",
      "",
      "  res.status(204).json({",
      "    status: 'success',",
      "  });",
      "});",
      "",
      "module.exports = {",
      "  getAll$3,",
      "  get$1,",
      "  create$1,",
      "  update$1,",
      "  delete$1,",
      "};"
    ],
    "description": "creates a base database controller"
  },
  "creates a base database route": {
    "prefix": "baseroute",
    "body": [
      "const express = require('express');",
      "const $2Controller = require('../controllers/$2Controller');",
      "const router = express.Router();",
      "",
      "router.route('/').get($2Controller.getAll$3).post($2Controller.create$1);",
      "",
      "router",
      "  .route('/:id')",
      "  .get($2Controller.get$1)",
      "  .patch($2Controller.update$1)",
      "  .delete($2Controller.delete$1);",
      "",
      "router.route('/delete/:id').delete($2Controller.hardDelete$1);",
      "",
      "module.exports = router;",
      ""
    ],
    "description": "creates a base database route"
  },
  "CRUD Operations": {
    "prefix": "crud",
    "body": [
      "const $2 = require('../models/$1Model');",
      "const ApiError = require('../utils/ApiError');",
      "",
      "const getAll$4 = async (req, res, next) => {",
      "  let { fields } = req.query;",
      "",
      "  if (fields) {",
      "    var fieldsList = fields",
      "      .split(',')",
      "      .map((field) => field.trim())",
      "      .filter((item) => item);",
      "  }",
      "  delete req.query['fields'];",
      "",
      "  const $3 = await $2.find(req.query)",
      "    .select(fieldsList || [])",
      "    .exec();",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "    results: $3.length,",
      "    $3: $3.reverse(),",
      "  });",
      "};",
      "",
      "const get$2 = async (req, res, next) => {",
      "  const $1 = await $2.findById(req.params.id).exec();",
      "",
      "  if (!$1) {",
      "    return next(new ApiError(`There is no ${$1} with that id`, 404));",
      "  }",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "    $1,",
      "  });",
      "};",
      "",
      "const create$2 = async (req, res, next) => {",
      "  const new$2 = await $2.create(req.body);",
      "",
      "  res.status(201).json({",
      "    status: 'success',",
      "    $1: new$2,",
      "  });",
      "};",
      "",
      "const update$2 = async (req, res, next) => {",
      "  const updated$2 = await $2.findByIdAndUpdate(req.params.id, req.body, {",
      "    new: true,",
      "  });",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "    updated$2,",
      "  });",
      "};",
      "",
      "const delete$2 = async (req, res, next) => {",
      "  const updated$2 = await $2.findByIdAndUpdate(req.params.id, { softDelete: true });",
      "",
      "  res.status(200).json({",
      "    status: 'success',",
      "    updated$2,",
      "  });",
      "};",
      "",
      "const hardDelete$2 = async (req, res, next) => {",
      "  await $2.findByIdAndDelete(req.params.id);",
      "",
      "  res.status(204).json({",
      "    status: 'success',",
      "  });",
      "};",
      "",
      "module.exports = {",
      "  getAll$4,",
      "  get$2,",
      "  create$2,",
      "  update$2,",
      "  delete$2,",
      "  hardDelete$2,",
      "};"
    ],
    "description": "CRUD Operations Template"
  },
  "DIFNE ROUTE IN APP.JS": {
    "prefix": "approute",
    "body": ["const $1Routes = require('./routes/$1Routes');", "app.use('/api/v1/$1', $1Routes);"],
    "description": "creates a base database route"
  },
  "DIFNE IS UNIQUE ROUTE": {
    "prefix": "uniqueroute",
    "body": ["router.route('/is$2Unique').post($1Controller.is$2Unique);"],
    "description": "denfine route for checking is item unique"
  },
  "DIFNE IS UNIQUE CONTROLLER": {
    "prefix": "uniquecontroller",
    "body": [
      "const is$1Unique = async (req, res, next) => {",
      "const { name } = req.body;",
      "",
      "const existing$1 = await $1.findOne({",
      " name,",
      "softDelete: false,",
      "}).exec();",
      "",
      "return res.status(200).json({",
      " status: !existing$1 ? 'success' : 'error',",
      "  });",
      "  };"
    ],

    "description": "denfine route for checking is item unique"
  }
}
